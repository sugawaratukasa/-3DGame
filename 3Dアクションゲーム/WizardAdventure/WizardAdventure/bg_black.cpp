//******************************************************************************
// 黒[bg_black.cpp]
// Author : 管原司
//******************************************************************************
//******************************************************************************
// インクルードファイル
//******************************************************************************
#include "main.h"
#include "renderer.h"
#include "manager.h"
#include "joystick.h"
#include "player.h"
#include "bg_black.h"
//******************************************************************************
// マクロ定義
//******************************************************************************
#define COL	(D3DXCOLOR(0.0f,0.0f,0.0f,1.0f))
//******************************************************************************
// 静的メンバ変数初期化
//******************************************************************************

//******************************************************************************
// コンストラクタ
//******************************************************************************
CBg_Black::CBg_Black(int nPriority)
{
}
//******************************************************************************
// デストラクタ
//******************************************************************************
CBg_Black::~CBg_Black()
{
}
//******************************************************************************
// 生成関数
//******************************************************************************
CBg_Black * CBg_Black::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	// CBg_Blackのポインタ
	CBg_Black *pBg_Black = NULL;

	// NULLの場合
	if (pBg_Black == NULL)
	{
		// メモリ確保
		pBg_Black = new CBg_Black;

		// NULLでない場合
		if (pBg_Black != NULL)
		{
			// 情報設定
			pBg_Black->SetPolygon(pos, size, C3D_Polygon::TEX_TYPE_SKY);

			// 初期化
			pBg_Black->Init();
		}
	}

	// ポインタを返す
	return pBg_Black;
}
//******************************************************************************
// 初期化関数
//******************************************************************************
HRESULT CBg_Black::Init(void)
{
	// 初期化
	C3D_Polygon::Init();

	// 色設定
	SetColor(COL);

	return S_OK;
}
//******************************************************************************
// 終了関数
//******************************************************************************
void CBg_Black::Uninit(void)
{
	// 終了
	C3D_Polygon::Uninit();
}
//******************************************************************************
// 更新関数
//******************************************************************************
void CBg_Black::Update(void)
{
	// 更新
	C3D_Polygon::Update();
	// コントローラー取得
	DIJOYSTATE js;
	js.lY = INIT_INT;
	js.lX = INIT_INT;
	CInputJoystick * pInputJoystick = CManager::GetInputJoystick();
	LPDIRECTINPUTDEVICE8 g_lpDIDevice = CInputJoystick::GetDevice();

	if (g_lpDIDevice != NULL)
	{
		g_lpDIDevice->Poll();
		g_lpDIDevice->GetDeviceState(sizeof(DIJOYSTATE), &js);
	}

	// 位置取得
	D3DXVECTOR3 pos = GetPosition();

	// プレイヤーの位置
	D3DXVECTOR3 PlayerPos;

	// CSceneクラスのポインタ
	CScene *pScene = NULL;
	do
	{
		// シーン取得
		pScene = GetScene(OBJTYPE_PLAYER);
		// NULLでない場合
		if (pScene != NULL)
		{
			// オブジェクトタイプ取得
			OBJTYPE objtype = GetObjType();

			// オブジェタイププレイヤーの場合
			if (objtype = OBJTYPE_PLAYER)
			{
				// プレイヤーの位置取得
				PlayerPos = ((CPlayer*)pScene)->GetPos();
			}
		}
		// NULLになるまで
	} while (pScene != NULL);

	// 位置代入
	pos.x = PlayerPos.x;

	// 位置設定
	SetPosition(pos);
}
//******************************************************************************
// 描画関数
//******************************************************************************
void CBg_Black::Draw(void)
{
	// 描画
	C3D_Polygon::Draw();
}